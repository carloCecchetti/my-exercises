{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPutgkeveaAbkBMuUpvf4O/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/carloCecchetti/my-experience/blob/master/MachineLearning1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SJKiYSdY-gkm",
        "outputId": "dc802e4f-0dd9-4866-e46e-866e94ebcf18"
      },
      "source": [
        "pip install matplotlib"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.1)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.4.7)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.10.0)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.19.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib) (1.15.0)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kiAmLjmwJRHT"
      },
      "source": [
        "features, attributes, independent variable, input\\\n",
        "label, dependent variable, output\\\n",
        "number of rows = number of instances \\\n",
        "number of columns = dimension (features)\n",
        "\n",
        "features = number raging from -1 to 1.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z6Ur-d8G_QY_"
      },
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OfA9Uymd-9_2"
      },
      "source": [
        "x = [i for i in range(10)]"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ca4jz19f_CaA"
      },
      "source": [
        "y = [i for i in range(10,30,2)]"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "X-eBUFEI_MgK",
        "outputId": "04c64dfc-c844-491b-d9f5-927f6f07a487"
      },
      "source": [
        "plt.plot(x,y)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f0a53dc8d50>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "hKALc6OL_VHn",
        "outputId": "efc593fc-bba7-4c38-8192-074460e227f4"
      },
      "source": [
        "plt.xlabel(\"X\")\n",
        "plt.ylabel(\"Y\")"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Y')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "Yn_4QL6w_saG",
        "outputId": "07012541-4ab0-4c33-ec23-6863734d1651"
      },
      "source": [
        "plt.xlabel(\"X axis\")\n",
        "plt.ylabel(\"Y axis\")\n",
        "plt.plot(x,y)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f0a53bcfc90>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "F0MPnt0i_xGh",
        "outputId": "b206106e-51b3-4743-8548-73dc4c38b8ba"
      },
      "source": [
        "plt.scatter(x,y)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f0a53bab790>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "D4s_TKQ6__g0",
        "outputId": "b89a4388-fec5-46bf-fc06-63ae7f0be84b"
      },
      "source": [
        "plt.scatter(x,y)\n",
        "plt.arrow(2,12,3,3)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.patches.FancyArrow at 0x7f0a538c1c90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FAuTuIrlFwLu",
        "outputId": "e563aaaa-e244-41f3-af7f-337e7e3d1e69"
      },
      "source": [
        "from sklearn import datasets\n",
        "import numpy as np\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "x = iris.data\n",
        "y=iris.target\n",
        "\n",
        "print(x,y)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[5.1 3.5 1.4 0.2]\n",
            " [4.9 3.  1.4 0.2]\n",
            " [4.7 3.2 1.3 0.2]\n",
            " [4.6 3.1 1.5 0.2]\n",
            " [5.  3.6 1.4 0.2]\n",
            " [5.4 3.9 1.7 0.4]\n",
            " [4.6 3.4 1.4 0.3]\n",
            " [5.  3.4 1.5 0.2]\n",
            " [4.4 2.9 1.4 0.2]\n",
            " [4.9 3.1 1.5 0.1]\n",
            " [5.4 3.7 1.5 0.2]\n",
            " [4.8 3.4 1.6 0.2]\n",
            " [4.8 3.  1.4 0.1]\n",
            " [4.3 3.  1.1 0.1]\n",
            " [5.8 4.  1.2 0.2]\n",
            " [5.7 4.4 1.5 0.4]\n",
            " [5.4 3.9 1.3 0.4]\n",
            " [5.1 3.5 1.4 0.3]\n",
            " [5.7 3.8 1.7 0.3]\n",
            " [5.1 3.8 1.5 0.3]\n",
            " [5.4 3.4 1.7 0.2]\n",
            " [5.1 3.7 1.5 0.4]\n",
            " [4.6 3.6 1.  0.2]\n",
            " [5.1 3.3 1.7 0.5]\n",
            " [4.8 3.4 1.9 0.2]\n",
            " [5.  3.  1.6 0.2]\n",
            " [5.  3.4 1.6 0.4]\n",
            " [5.2 3.5 1.5 0.2]\n",
            " [5.2 3.4 1.4 0.2]\n",
            " [4.7 3.2 1.6 0.2]\n",
            " [4.8 3.1 1.6 0.2]\n",
            " [5.4 3.4 1.5 0.4]\n",
            " [5.2 4.1 1.5 0.1]\n",
            " [5.5 4.2 1.4 0.2]\n",
            " [4.9 3.1 1.5 0.2]\n",
            " [5.  3.2 1.2 0.2]\n",
            " [5.5 3.5 1.3 0.2]\n",
            " [4.9 3.6 1.4 0.1]\n",
            " [4.4 3.  1.3 0.2]\n",
            " [5.1 3.4 1.5 0.2]\n",
            " [5.  3.5 1.3 0.3]\n",
            " [4.5 2.3 1.3 0.3]\n",
            " [4.4 3.2 1.3 0.2]\n",
            " [5.  3.5 1.6 0.6]\n",
            " [5.1 3.8 1.9 0.4]\n",
            " [4.8 3.  1.4 0.3]\n",
            " [5.1 3.8 1.6 0.2]\n",
            " [4.6 3.2 1.4 0.2]\n",
            " [5.3 3.7 1.5 0.2]\n",
            " [5.  3.3 1.4 0.2]\n",
            " [7.  3.2 4.7 1.4]\n",
            " [6.4 3.2 4.5 1.5]\n",
            " [6.9 3.1 4.9 1.5]\n",
            " [5.5 2.3 4.  1.3]\n",
            " [6.5 2.8 4.6 1.5]\n",
            " [5.7 2.8 4.5 1.3]\n",
            " [6.3 3.3 4.7 1.6]\n",
            " [4.9 2.4 3.3 1. ]\n",
            " [6.6 2.9 4.6 1.3]\n",
            " [5.2 2.7 3.9 1.4]\n",
            " [5.  2.  3.5 1. ]\n",
            " [5.9 3.  4.2 1.5]\n",
            " [6.  2.2 4.  1. ]\n",
            " [6.1 2.9 4.7 1.4]\n",
            " [5.6 2.9 3.6 1.3]\n",
            " [6.7 3.1 4.4 1.4]\n",
            " [5.6 3.  4.5 1.5]\n",
            " [5.8 2.7 4.1 1. ]\n",
            " [6.2 2.2 4.5 1.5]\n",
            " [5.6 2.5 3.9 1.1]\n",
            " [5.9 3.2 4.8 1.8]\n",
            " [6.1 2.8 4.  1.3]\n",
            " [6.3 2.5 4.9 1.5]\n",
            " [6.1 2.8 4.7 1.2]\n",
            " [6.4 2.9 4.3 1.3]\n",
            " [6.6 3.  4.4 1.4]\n",
            " [6.8 2.8 4.8 1.4]\n",
            " [6.7 3.  5.  1.7]\n",
            " [6.  2.9 4.5 1.5]\n",
            " [5.7 2.6 3.5 1. ]\n",
            " [5.5 2.4 3.8 1.1]\n",
            " [5.5 2.4 3.7 1. ]\n",
            " [5.8 2.7 3.9 1.2]\n",
            " [6.  2.7 5.1 1.6]\n",
            " [5.4 3.  4.5 1.5]\n",
            " [6.  3.4 4.5 1.6]\n",
            " [6.7 3.1 4.7 1.5]\n",
            " [6.3 2.3 4.4 1.3]\n",
            " [5.6 3.  4.1 1.3]\n",
            " [5.5 2.5 4.  1.3]\n",
            " [5.5 2.6 4.4 1.2]\n",
            " [6.1 3.  4.6 1.4]\n",
            " [5.8 2.6 4.  1.2]\n",
            " [5.  2.3 3.3 1. ]\n",
            " [5.6 2.7 4.2 1.3]\n",
            " [5.7 3.  4.2 1.2]\n",
            " [5.7 2.9 4.2 1.3]\n",
            " [6.2 2.9 4.3 1.3]\n",
            " [5.1 2.5 3.  1.1]\n",
            " [5.7 2.8 4.1 1.3]\n",
            " [6.3 3.3 6.  2.5]\n",
            " [5.8 2.7 5.1 1.9]\n",
            " [7.1 3.  5.9 2.1]\n",
            " [6.3 2.9 5.6 1.8]\n",
            " [6.5 3.  5.8 2.2]\n",
            " [7.6 3.  6.6 2.1]\n",
            " [4.9 2.5 4.5 1.7]\n",
            " [7.3 2.9 6.3 1.8]\n",
            " [6.7 2.5 5.8 1.8]\n",
            " [7.2 3.6 6.1 2.5]\n",
            " [6.5 3.2 5.1 2. ]\n",
            " [6.4 2.7 5.3 1.9]\n",
            " [6.8 3.  5.5 2.1]\n",
            " [5.7 2.5 5.  2. ]\n",
            " [5.8 2.8 5.1 2.4]\n",
            " [6.4 3.2 5.3 2.3]\n",
            " [6.5 3.  5.5 1.8]\n",
            " [7.7 3.8 6.7 2.2]\n",
            " [7.7 2.6 6.9 2.3]\n",
            " [6.  2.2 5.  1.5]\n",
            " [6.9 3.2 5.7 2.3]\n",
            " [5.6 2.8 4.9 2. ]\n",
            " [7.7 2.8 6.7 2. ]\n",
            " [6.3 2.7 4.9 1.8]\n",
            " [6.7 3.3 5.7 2.1]\n",
            " [7.2 3.2 6.  1.8]\n",
            " [6.2 2.8 4.8 1.8]\n",
            " [6.1 3.  4.9 1.8]\n",
            " [6.4 2.8 5.6 2.1]\n",
            " [7.2 3.  5.8 1.6]\n",
            " [7.4 2.8 6.1 1.9]\n",
            " [7.9 3.8 6.4 2. ]\n",
            " [6.4 2.8 5.6 2.2]\n",
            " [6.3 2.8 5.1 1.5]\n",
            " [6.1 2.6 5.6 1.4]\n",
            " [7.7 3.  6.1 2.3]\n",
            " [6.3 3.4 5.6 2.4]\n",
            " [6.4 3.1 5.5 1.8]\n",
            " [6.  3.  4.8 1.8]\n",
            " [6.9 3.1 5.4 2.1]\n",
            " [6.7 3.1 5.6 2.4]\n",
            " [6.9 3.1 5.1 2.3]\n",
            " [5.8 2.7 5.1 1.9]\n",
            " [6.8 3.2 5.9 2.3]\n",
            " [6.7 3.3 5.7 2.5]\n",
            " [6.7 3.  5.2 2.3]\n",
            " [6.3 2.5 5.  1.9]\n",
            " [6.5 3.  5.2 2. ]\n",
            " [6.2 3.4 5.4 2.3]\n",
            " [5.9 3.  5.1 1.8]] [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
            " 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
            " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n",
            " 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n",
            " 2 2]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H8iVxVClNnHQ",
        "outputId": "3004dcbe-efb7-484e-f2ea-387862c63d93"
      },
      "source": [
        "print(x.shape)\n",
        "print(y.shape)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(150, 4)\n",
            "(150,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5GEdEescNx8r",
        "outputId": "23c6339b-f04d-4b6f-b9df-8d97cb82a7bd"
      },
      "source": [
        "#let's train and test by using 80% to train and 20% to test the accuracy\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.2)\n",
        "print(X_train.shape)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(120, 4)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L_2dMabFOhJk",
        "outputId": "1638037d-641f-4d7c-da0f-030ea04366c6"
      },
      "source": [
        "print(X_test.shape)"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(30, 4)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PcMlQ_G-OkaP",
        "outputId": "eb8b4a40-64d0-423a-fa7d-9051798a9752"
      },
      "source": [
        "print(y_train.shape)\n",
        "print(y_test.shape)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(120,)\n",
            "(30,)\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}